This is a description of the server-side classes and the way they
interact.

Space management objects:

Zone (zone.h, zone.cc):  This is the main overlying object which
encompasses an entire server.  Its purpose is to keep track of:
    1) the complete list of actions which may be performed in that world
    section
    2) the complete list of game objects within the world section
    3) the basic behaviour of the world section (gravity, weather, etc).
The zone contains three thread pools, to manage action requests by
actors, handling motion of items within the space, and processing any
updates to inform actors what objects have changed.  The zone will
eventually record which zones are adjacent to it in each direction, so it
can inform players when they are reaching the edges of the server's
responsibility, and hand them off to the appropriate neighbor.  The
constructor and start methods can throw std::runtime_error.

Octree (octree.h, octree.cc):  General space representation within
each portion of the zone's managed space.  The octree maintains a list
of game objects it contains.  Each octant also has pointers to each of
its neighbors, for simpler traversal.

UpdatePool (update_pool.h, update_pool.cc):  This is the thread pool
which handles sending position updates to clients.  Updates are pushed
into this pool's work queue by the motion pool workers.

User management objects:

Control (control.h, control.cc):  This object keeps track of a logged-in
actor, the current actions that the actor may perform, and the motion
object to which s/he is associated.  The control object is the basic
method for mapping an actor to an object, and the dispatcher for taking
action requests from the actor, verifying that the object can perform
those actions, and turning them into game activity.

GameObject (game_obj.h, game_obj.cc):  This is the basic dynamic
object.  Everything which is able move around in space is represented
as such an object.  The game object contains references to default
control objects and geometries, as well as current control objects and
geometries, which may be changed at any time.  Removing the control or
geometry will cause the object to revert to its default.  Each object
also contains an object ID value, currently represented as a 64-bit
integer.  The game object also knows about attributes and natures that
it has.  The position, orientation, and current motion and rotation
are also kept within the game object.

Geometry (geometry.h, geometry.cc, mostly unimplemented):  This is the
representation of the geometry of an object.

Socket objects:

Sockaddr (sockaddr.h):  The base class to simplify handling of IPv4 or
IPv6 socket types.

Sockaddr_in (sockaddr.h):  Handling of IPv4 socket types, derived from
Sockaddr.

Sockaddr_in6 (sockaddr.h):  Handling of IPv6 socket types, derived from
Sockaddr.

Sockaddr_un (sockaddr.h>:  Handling of unix-domain socket types,
derived from Sockaddr.

basesock (basesock.h, basesock.cc):  This is a basic listening socket,
which includes a listening thread.  All methods can throw
std::runtime_error.

listen_socket (listensock.h, listensock.cc):  This is a virtual base
class which contains a basesock, a user list, and a thread pool to
handle sending data out.  The constructor and init methods can throw
std::runtime_error.

stream_socket (stream.h, stream.cc):  This class is derived from the
listen_socket, and implements stream (TCP) sending and receiving.  It
adds subservers (separate processes, in order to maximize the number
of allowed filehandles, and to further parallelize the I/O, along the
same lines as the Apache Prefork MPM).  The constructor and start
methods can throw std::runtime_error.

dgram_socket (dgram.h, dgram.cc):  This class is derived from the
listen_socket, and implements datagram sending and receiving, and adds
a map of Sockaddr objects to users.  The constructor and start methods
can throw std::runtime_error.

User list objects:

base_user (listensock.h, listensock.cc):  This is a virtual base class
which contains a user ID, a pointer to a control object, and some
elements to keep track of possible link-dead or logged-out users.

stream_user (stream.h, stream.cc):  This class is derived from the
base_user, and adds subserver number and file descriptor.

dgram_user (dgram.h, dgram.cc):  This class is derived from the base_user,
and adds a Sockaddr object, which is used both to uniquely identify the
user for received packets, and to simplify sending to the user.

Support objects:

Library (library.h, library.cc):  This class abstracts dynamic
libraries - opening, finding symbols within, and closing.  All methods
can throw std::runtime_error.

ThreadPool (thread_pool.h):  This template creates a work queue of a
given type, and creates a pool of threads which handle items which are
pushed onto the work queue.  For access-type applications, such as
accepting passwords, the queue can automatically clear any element
once it is removed from the queue.  It can resize the thread pool on
the fly, and can start and stop the pool as needed.  The constructor
and start methods can throw std::runtime_error.

Some ancillary support types:

Action routine (actions/):  These will not be classes per se, but rather
functions with a given prototype.  These functions will require a source
motion object, a destination motion object, an operation vector (i.e. the
direction), and an intensity.  They will be responsible for checking if
the source object/actor can perform the action, and doing the actual
action.  Action routines may create game objects, motion objects, and
possibly control objects.

Nature (defs.h, currently unused):  An integer (possibly just a boolean
value) representing some fundamental state of the game object, such as
"wet" or "cold".  Currently contained within the GameObject, mapped from a
std::string.

Attribute (defs.h, currently unused):  An integer representing the game
object's power level in a given attribute.  Attributes are basic physical
parameters that the object has, such as strength, stamina, agility, etc.
Currently contained within the GameObject, mapped from a std::string.

ActionLevel (defs.h, currently unused):  An integer representation of
a game object's skill level, current advancement, and last time of
leveling up.  The time is intended to eliminate "power leveling", by
setting a minimum time that must elapse between levelings.
